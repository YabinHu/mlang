
#ifdef GET_DIAG_ARRAYS
static const short DiagSubGroup0[] = { 51, -1 };
static const short DiagArray1[] = { diag::warn_pragma_message, -1 };
static const short DiagArray2[] = { diag::pp_hash_warning, -1 };
static const short DiagArray3[] = { diag::warn_explicit_instantiation_must_be_global_0x, diag::warn_explicit_instantiation_out_of_scope_0x, -1 };
static const short DiagArray6[] = { diag::ext_typecheck_addrof_class_temporary, -1 };
static const short DiagSubGroup8[] = { 100, 120, -1 };
static const short DiagArray9[] = { diag::ext_nested_name_member_ref_lookup_ambiguous, -1 };
static const short DiagArray10[] = { diag::warn_array_index_exceeds_bounds, diag::warn_array_index_precedes_bounds, -1 };
static const short DiagSubGroup11[] = { 69, 34, -1 };
static const short DiagArray15[] = { diag::ext_rvalue_to_reference_access_ctor, diag::ext_rvalue_to_reference_temp_copy_no_viable, -1 };
static const short DiagArray16[] = { diag::warn_impcast_bool_to_null_pointer, -1 };
static const short DiagArray17[] = { diag::pp_redef_builtin_macro, -1 };
static const short DiagArray18[] = { diag::ext_empty_struct_union, -1 };
static const short DiagArray19[] = { diag::ext_hexconstant_cplusplus, -1 };
static const short DiagArray20[] = { diag::warn_explicit_instantiation_unqualified_wrong_namespace_0x, -1 };
static const short DiagSubGroup20[] = { 19, -1 };
static const short DiagArray21[] = { diag::ext_alias_declaration, diag::ext_array_size_conversion, diag::ext_explicit_instantiation_after_specialization, diag::ext_generalized_initializer_lists, diag::ext_inline_namespace, diag::ext_nonclass_type_friend, diag::ext_override_control_keyword, diag::ext_ref_qualifier, diag::ext_rvalue_reference, diag::ext_template_outside_of_template, diag::ext_template_parameter_default_in_function_template, diag::ext_template_spec_decl_out_of_scope, diag::ext_template_spec_decl_out_of_scope_global, diag::ext_typename_outside_of_template, diag::ext_unelaborated_friend_type, diag::ext_variadic_templates, diag::warn_defaulted_function_accepted_as_extension, diag::warn_deleted_function_accepted_as_extension, diag::warn_explicit_conversion_functions, -1 };
static const short DiagSubGroup21[] = { 22, -1 };
static const short DiagArray22[] = { diag::ext_in_class_initializer_float_type, -1 };
static const short DiagArray23[] = { diag::warn_cast_align, -1 };
static const short DiagArray26[] = { diag::warn_subscript_is_char, -1 };
static const short DiagArray27[] = { diag::escaped_newline_block_comment_end, diag::ext_bcpl_comment, diag::ext_multi_line_bcpl_comment, diag::warn_nested_block_comment, -1 };
static const short DiagSubGroup28[] = { 27, -1 };
static const short DiagArray29[] = { diag::warn_maybe_uninit_var, diag::warn_maybe_uninit_var_captured_by_block, -1 };
static const short DiagArray30[] = { diag::warn_impcast_bitfield_precision_constant, diag::warn_impcast_integer_precision_constant, -1 };
static const short DiagArray31[] = { diag::warn_logical_instead_of_bitwise, -1 };
static const short DiagArray32[] = { diag::warn_impcast_complex_scalar, diag::warn_impcast_different_enum_types, diag::warn_impcast_float_integer, diag::warn_impcast_float_precision, diag::warn_impcast_integer_precision, diag::warn_impcast_vector_scalar, diag::warn_template_arg_negative, diag::warn_template_arg_too_large, -1 };
static const short DiagSubGroup32[] = { 136, 30, 84, 138, 16, -1 };
static const short DiagArray34[] = { diag::warn_default_atomic_custom_getter_setter, -1 };
static const short DiagArray35[] = { diag::ext_mixed_decls_code, -1 };
static const short DiagArray36[] = { diag::note_it_delegates_to, diag::note_which_delegates_to, diag::warn_delegating_ctor_cycle, -1 };
static const short DiagArray37[] = { diag::warn_access_decl_deprecated, diag::warn_drv_treating_input_as_cxx, diag::warn_increment_bool, diag::warn_vector_long_decl_spec_combination, -1 };
static const short DiagSubGroup37[] = { 38, -1 };
static const short DiagArray38[] = { diag::warn_deprecated, diag::warn_deprecated_fwdclass_message, diag::warn_deprecated_message, -1 };
static const short DiagArray39[] = { diag::warn_deprecated_def, -1 };
static const short DiagArray40[] = { diag::warn_deprecated_string_literal_conversion, -1 };
static const short DiagArray43[] = { diag::warn_conflicting_param_modifiers, diag::warn_conflicting_ret_type_modifiers, -1 };
static const short DiagArray45[] = { diag::warn_method_param_declaration, -1 };
static const short DiagArray47[] = { diag::warn_empty_if_body, -1 };
static const short DiagSubGroup48[] = { 52, -1 };
static const short DiagArray49[] = { diag::warn_comparison_of_mixed_enum_types, -1 };
static const short DiagArray50[] = { diag::warn_exit_time_destructor, -1 };
static const short DiagSubGroup51[] = { 95, 67, 76, 131, 137, 182, -1 };
static const short DiagArray52[] = { diag::ext_pp_extra_tokens_at_eol, -1 };
static const short DiagArray53[] = { diag::warn_floatingpoint_eq, -1 };
static const short DiagArray54[] = { diag::warn_format_invalid_conversion, diag::warn_format_invalid_positional_specifier, diag::warn_format_mix_positional_nonpositional_args, diag::warn_format_nonsensical_length, diag::warn_format_string_is_wide_literal, diag::warn_format_zero_positional_specifier, diag::warn_missing_format_string, diag::warn_printf_asterisk_wrong_type, diag::warn_printf_conversion_argument_type_mismatch, diag::warn_printf_format_string_contains_null_char, diag::warn_printf_ignored_flag, diag::warn_printf_incomplete_specifier, diag::warn_printf_insufficient_data_args, diag::warn_printf_nonsensical_flag, diag::warn_printf_nonsensical_optional_amount, diag::warn_printf_positional_arg_exceeds_data_args, diag::warn_scanf_nonzero_width, diag::warn_scanf_scanlist_incomplete, -1 };
static const short DiagSubGroup54[] = { 55, 59, 109, 57, -1 };
static const short DiagArray55[] = { diag::warn_printf_data_arg_not_used, -1 };
static const short DiagArray56[] = { diag::warn_format_nonliteral, -1 };
static const short DiagSubGroup56[] = { 57, -1 };
static const short DiagArray57[] = { diag::warn_format_nonliteral_noargs, diag::warn_printf_write_back, -1 };
static const short DiagSubGroup58[] = { 54, -1 };
static const short DiagArray59[] = { diag::warn_empty_format_string, -1 };
static const short DiagSubGroup60[] = { 56, 57, 58, -1 };
static const short DiagArray61[] = { diag::ext_four_char_character_literal, -1 };
static const short DiagArray62[] = { diag::warn_global_constructor, diag::warn_global_destructor, -1 };
static const short DiagArray63[] = { diag::ext_anonymous_struct, diag::ext_anonymous_union, diag::ext_flexible_array_empty_aggregate_gnu, diag::ext_flexible_array_init, diag::ext_flexible_array_union_gnu, diag::ext_forward_ref_enum_def, diag::ext_gnu_address_of_label, diag::ext_gnu_case_range, diag::ext_gnu_conditional_expr, diag::ext_gnu_empty_initializer, diag::ext_gnu_indirect_goto, diag::ext_gnu_local_label, diag::ext_gnu_statement_expr, diag::ext_qualified_function_type_template_arg, diag::ext_typecheck_expression_not_constant_but_accepted, diag::ext_variable_sized_type_in_struct, -1 };
static const short DiagSubGroup63[] = { 64, 188, -1 };
static const short DiagArray64[] = { diag::ext_gnu_array_range, diag::ext_gnu_missing_equal_designator, diag::ext_gnu_old_style_field_designator, -1 };
static const short DiagArray65[] = { diag::warn_using_directive_in_header, -1 };
static const short DiagArray66[] = { diag::warn_condition_is_idiomatic_assignment, -1 };
static const short DiagArray67[] = { diag::warn_qual_return_type, -1 };
static const short DiagSubGroup68[] = { 70, 71, -1 };
static const short DiagArray69[] = { diag::warn_auto_implicit_atomic_property, diag::warn_implicit_atomic_property, -1 };
static const short DiagArray70[] = { diag::ext_implicit_function_decl, diag::warn_implicit_function_decl, -1 };
static const short DiagArray71[] = { diag::ext_missing_type_specifier, -1 };
static const short DiagArray73[] = { diag::ext_typecheck_convert_incompatible_pointer, -1 };
static const short DiagArray74[] = { diag::warn_incomplete_impl, -1 };
static const short DiagArray76[] = { diag::warn_initializer_overrides, diag::warn_subobject_initializer_overrides, -1 };
static const short DiagArray79[] = { diag::warn_falloff_noreturn_function, diag::warn_noreturn_function_has_return_expr, -1 };
static const short DiagArray80[] = { diag::warn_offsetof_non_pod_type, -1 };
static const short DiagArray82[] = { diag::err_pp_bad_paste_ms, -1 };
static const short DiagArray83[] = { diag::warn_parameter_size, diag::warn_return_value_size, -1 };
static const short DiagArray84[] = { diag::warn_impcast_literal_float_to_integer, -1 };
static const short DiagArray85[] = { diag::warn_float_overflow, diag::warn_float_underflow, -1 };
static const short DiagArray86[] = { diag::ext_template_arg_local_type, -1 };
static const short DiagArray87[] = { diag::warn_logical_and_in_logical_or, -1 };
static const short DiagArray88[] = { diag::ext_longlong, -1 };
static const short DiagArray90[] = { diag::warn_non_contravariant_param_types, diag::warn_non_covariant_ret_types, -1 };
static const short DiagArray91[] = { diag::ext_anonymous_record_with_type, diag::ext_enumerator_too_large, diag::ext_flexible_array_empty_aggregate_ms, diag::ext_flexible_array_union_ms, diag::ext_ms_anonymous_struct, diag::ext_ms_enum_fixed_underlying_type, diag::ext_ms_explicit_constructor_call, diag::ext_ms_forward_ref_enum, diag::warn_pure_function_definition, -1 };
static const short DiagArray92[] = { diag::warn_struct_class_tag_mismatch, -1 };
static const short DiagArray93[] = { diag::warn_missing_braces, -1 };
static const short DiagArray94[] = { diag::ext_no_declarators, diag::ext_typedef_without_a_name, -1 };
static const short DiagArray95[] = { diag::warn_missing_field_initializers, -1 };
static const short DiagArray98[] = { diag::warn_suggest_noreturn_block, diag::warn_suggest_noreturn_function, -1 };
static const short DiagArray99[] = { diag::warn_missing_prototype, -1 };
static const short DiagSubGroup100[] = { 26, 27, 54, 68, 92, 93, 101, 127, 128, 130, 155, 160, 167, 169, 175, 187, 189, 117, -1 };
static const short DiagArray101[] = { diag::ext_multichar_character_literal, -1 };
static const short DiagSubGroup104[] = { 137, 32, 85, -1 };
static const short DiagArray105[] = { diag::warn_dyn_class_memaccess, diag::warn_non_pod_memaccess, -1 };
static const short DiagArray106[] = { diag::warn_cannot_pass_non_pod_arg_to_vararg, -1 };
static const short DiagArray107[] = { diag::warn_non_virtual_dtor, -1 };
static const short DiagArray108[] = { diag::warn_synthesized_ivar_access, -1 };
static const short DiagArray109[] = { diag::warn_null_arg, -1 };
static const short DiagArray111[] = { diag::warn_indirection_through_null, -1 };
static const short DiagArray114[] = { diag::ext_out_of_line_declaration, -1 };
static const short DiagArray116[] = { diag::ext_string_too_long, -1 };
static const short DiagArray117[] = { diag::warn_overloaded_virtual, -1 };
static const short DiagArray118[] = { diag::warn_unnecessary_packed, -1 };
static const short DiagArray119[] = { diag::warn_padded_struct_anon_field, diag::warn_padded_struct_field, diag::warn_padded_struct_size, -1 };
static const short DiagArray120[] = { diag::warn_condition_is_assignment, diag::warn_equality_with_extra_parens, diag::warn_precedence_bitwise_rel, -1 };
static const short DiagSubGroup120[] = { 87, -1 };
static const short DiagArray121[] = { diag::ext_gnu_ptr_func_arith, diag::ext_gnu_void_ptr, diag::ext_sizeof_function_type, diag::ext_sizeof_void_type, -1 };
static const short DiagArray122[] = { diag::ext_typecheck_convert_incompatible_pointer_sign, -1 };
static const short DiagArray124[] = { diag::warn_unimplemented_protocol_method, -1 };
static const short DiagArray125[] = { diag::warn_objc_property_attr_mutually_exclusive, -1 };
static const short DiagArray127[] = { diag::warn_initializer_out_of_order, -1 };
static const short DiagArray128[] = { diag::ext_return_has_expr, diag::ext_return_missing_expr, diag::warn_falloff_nonvoid_function, diag::warn_maybe_falloff_nonvoid_function, diag::warn_return_missing_expr, -1 };
static const short DiagArray129[] = { diag::warn_unimplemented_selector, -1 };
static const short DiagArray130[] = { diag::warn_self_assignment, -1 };
static const short DiagArray131[] = { diag::warn_semicolon_before_method_body, -1 };
static const short DiagArray133[] = { diag::warn_decl_shadow, -1 };
static const short DiagArray134[] = { diag::warn_shift_result_gt_typewidth, -1 };
static const short DiagArray135[] = { diag::warn_shift_result_overrides_sign_bit, -1 };
static const short DiagArray136[] = { diag::warn_impcast_integer_64_32, -1 };
static const short DiagArray137[] = { diag::warn_mixed_sign_comparison, diag::warn_mixed_sign_conditional, -1 };
static const short DiagArray138[] = { diag::warn_impcast_integer_sign, diag::warn_impcast_integer_sign_conditional, -1 };
static const short DiagArray153[] = { diag::warn_strict_multiple_method_decl, -1 };
static const short DiagArray154[] = { diag::ext_typecheck_base_super, -1 };
static const short DiagArray155[] = { diag::warn_case_value_overflow, -1 };
static const short DiagSubGroup155[] = { 157, -1 };
static const short DiagArray157[] = { diag::warn_missing_case1, diag::warn_missing_case2, diag::warn_missing_case3, diag::warn_missing_cases, diag::warn_not_in_enum, -1 };
static const short DiagArray159[] = { diag::warn_comparison_always, diag::warn_lunsigned_always_true_comparison, diag::warn_runsigned_always_true_comparison, -1 };
static const short DiagArray160[] = { diag::trigraph_converted, diag::trigraph_ends_block_comment, diag::trigraph_ignored, diag::trigraph_ignored_block_comment, -1 };
static const short DiagArray162[] = { diag::warn_redefinition_of_typedef, -1 };
static const short DiagArray163[] = { diag::warn_undeclared_selector, -1 };
static const short DiagArray164[] = { diag::warn_pp_undef_identifier, -1 };
static const short DiagArray166[] = { diag::warn_pointer_indirection_from_incompatible_type, diag::warn_undefined_reinterpret_cast, -1 };
static const short DiagArray167[] = { diag::warn_field_is_uninit, diag::warn_uninit_self_reference_in_init, diag::warn_uninit_var, diag::warn_uninit_var_captured_by_block, -1 };
static const short DiagArray168[] = { diag::warn_unknown_attribute_ignored, -1 };
static const short DiagArray169[] = { diag::ext_on_off_switch_syntax, diag::ext_pragma_syntax_eod, diag::ext_stdc_pragma_ignored, diag::warn_pragma_diagnostic_cannot_pop, diag::warn_pragma_diagnostic_invalid, diag::warn_pragma_diagnostic_invalid_option, diag::warn_pragma_diagnostic_invalid_token, diag::warn_pragma_diagnostic_unknown_warning, diag::warn_pragma_ignored, diag::warn_stdc_fenv_access_not_supported, -1 };
static const short DiagArray170[] = { diag::warn_unknown_warning_option, diag::warn_unknown_warning_specifier, -1 };
static const short DiagArray171[] = { diag::ext_template_arg_unnamed_type, -1 };
static const short DiagArray172[] = { diag::warn_unneeded_internal_decl, -1 };
static const short DiagArray173[] = { diag::warn_unneeded_member_function, -1 };
static const short DiagArray174[] = { diag::warn_unreachable, -1 };
static const short DiagSubGroup175[] = { 176, 178, 179, 183, 184, -1 };
static const short DiagArray177[] = { diag::warn_unused_exception_param, -1 };
static const short DiagArray178[] = { diag::warn_unused_function, -1 };
static const short DiagSubGroup178[] = { 172, -1 };
static const short DiagArray179[] = { diag::warn_unused_label, -1 };
static const short DiagArray180[] = { diag::pp_macro_not_used, -1 };
static const short DiagArray181[] = { diag::warn_unused_member_function, -1 };
static const short DiagSubGroup181[] = { 173, -1 };
static const short DiagArray182[] = { diag::warn_unused_parameter, -1 };
static const short DiagArray183[] = { diag::warn_unused_call, diag::warn_unused_expr, diag::warn_unused_property_expr, diag::warn_unused_voidptr, -1 };
static const short DiagArray184[] = { diag::warn_unused_variable, -1 };
static const short DiagArray185[] = { diag::warn_used_but_marked_unused, -1 };
static const short DiagArray186[] = { diag::ext_named_variadic_macro, diag::ext_variadic_macro, -1 };
static const short DiagArray187[] = { diag::warn_incompatible_vectors, -1 };
static const short DiagArray188[] = { diag::ext_vla, -1 };
static const short DiagArray190[] = { diag::warn_weak_vtable, -1 };
static const short DiagSubGroup191[] = { 40, -1 };
#endif // GET_DIAG_ARRAYS


#ifdef GET_DIAG_TABLE
  { 0, "",                              0, DiagSubGroup0 },
  { 16, "#pragma messages",              DiagArray1, 0 },
  { 9, "#warnings",                     DiagArray2, 0 },
  { 14, "-Wc++0x-compat",                DiagArray3, 0 },
  { 3, "abi",                           0, 0 },
  { 7, "address",                       0, 0 },
  { 20, "address-of-temporary",          DiagArray6, 0 },
  { 16, "aggregate-return",              0, 0 },
  { 3, "all",                           0, DiagSubGroup8 },
  { 25, "ambiguous-member-template",     DiagArray9, 0 },
  { 12, "array-bounds",                  DiagArray10, 0 },
  { 17, "atomic-properties",             0, DiagSubGroup11 },
  { 10, "attributes",                    0, 0 },
  { 12, "availability",                  0, 0 },
  { 17, "bad-function-cast",             0, 0 },
  { 22, "bind-to-temporary-copy",        DiagArray15, 0 },
  { 16, "bool-conversions",              DiagArray16, 0 },
  { 23, "builtin-macro-redefined",       DiagArray17, 0 },
  { 10, "c++-compat",                    DiagArray18, 0 },
  { 14, "c++-hex-floats",                DiagArray19, 0 },
  { 12, "c++0x-compat",                  DiagArray20, DiagSubGroup20 },
  { 16, "c++0x-extensions",              DiagArray21, DiagSubGroup21 },
  { 29, "c++0x-static-nonintegral-init", DiagArray22, 0 },
  { 10, "cast-align",                    DiagArray23, 0 },
  { 9, "cast-qual",                     0, 0 },
  { 10, "char-align",                    0, 0 },
  { 15, "char-subscripts",               DiagArray26, 0 },
  { 7, "comment",                       DiagArray27, 0 },
  { 8, "comments",                      0, DiagSubGroup28 },
  { 25, "conditional-uninitialized",     DiagArray29, 0 },
  { 19, "constant-conversion",           DiagArray30, 0 },
  { 24, "constant-logical-operand",      DiagArray31, 0 },
  { 10, "conversion",                    DiagArray32, DiagSubGroup32 },
  { 17, "ctor-dtor-privacy",             0, 0 },
  { 24, "custom-atomic-properties",      DiagArray34, 0 },
  { 27, "declaration-after-statement",   DiagArray35, 0 },
  { 22, "delegating-ctor-cycles",        DiagArray36, 0 },
  { 10, "deprecated",                    DiagArray37, DiagSubGroup37 },
  { 23, "deprecated-declarations",       DiagArray38, 0 },
  { 26, "deprecated-implementations",    DiagArray39, 0 },
  { 27, "deprecated-writable-strings",   DiagArray40, 0 },
  { 21, "disabled-optimization",         0, 0 },
  { 12, "discard-qual",                  0, 0 },
  { 28, "distributed-object-modifiers",  DiagArray43, 0 },
  { 11, "div-by-zero",                   0, 0 },
  { 20, "duplicate-method-arg",          DiagArray45, 0 },
  { 6, "effc++",                        0, 0 },
  { 10, "empty-body",                    DiagArray47, 0 },
  { 12, "endif-labels",                  0, DiagSubGroup48 },
  { 12, "enum-compare",                  DiagArray49, 0 },
  { 21, "exit-time-destructors",         DiagArray50, 0 },
  { 5, "extra",                         0, DiagSubGroup51 },
  { 12, "extra-tokens",                  DiagArray52, 0 },
  { 11, "float-equal",                   DiagArray53, 0 },
  { 6, "format",                        DiagArray54, DiagSubGroup54 },
  { 17, "format-extra-args",             DiagArray55, 0 },
  { 17, "format-nonliteral",             DiagArray56, DiagSubGroup56 },
  { 15, "format-security",               DiagArray57, 0 },
  { 10, "format-y2k",                    0, DiagSubGroup58 },
  { 18, "format-zero-length",            DiagArray59, 0 },
  { 8, "format=2",                      0, DiagSubGroup60 },
  { 19, "four-char-constants",           DiagArray61, 0 },
  { 19, "global-constructors",           DiagArray62, 0 },
  { 3, "gnu",                           DiagArray63, DiagSubGroup63 },
  { 14, "gnu-designator",                DiagArray64, 0 },
  { 14, "header-hygiene",                DiagArray65, 0 },
  { 21, "idiomatic-parentheses",         DiagArray66, 0 },
  { 18, "ignored-qualifiers",            DiagArray67, 0 },
  { 8, "implicit",                      0, DiagSubGroup68 },
  { 26, "implicit-atomic-properties",    DiagArray69, 0 },
  { 29, "implicit-function-declaration", DiagArray70, 0 },
  { 12, "implicit-int",                  DiagArray71, 0 },
  { 6, "import",                        0, 0 },
  { 26, "incompatible-pointer-types",    DiagArray73, 0 },
  { 25, "incomplete-implementation",     DiagArray74, 0 },
  { 9, "init-self",                     0, 0 },
  { 21, "initializer-overrides",         DiagArray76, 0 },
  { 6, "inline",                        0, 0 },
  { 19, "int-to-pointer-cast",           0, 0 },
  { 16, "invalid-noreturn",              DiagArray79, 0 },
  { 16, "invalid-offsetof",              DiagArray80, 0 },
  { 11, "invalid-pch",                   0, 0 },
  { 19, "invalid-token-paste",           DiagArray82, 0 },
  { 19, "large-by-value-copy",           DiagArray83, 0 },
  { 18, "literal-conversion",            DiagArray84, 0 },
  { 13, "literal-range",                 DiagArray85, 0 },
  { 24, "local-type-template-args",      DiagArray86, 0 },
  { 22, "logical-op-parentheses",        DiagArray87, 0 },
  { 9, "long-long",                     DiagArray88, 0 },
  { 4, "main",                          0, 0 },
  { 17, "method-signatures",             DiagArray90, 0 },
  { 9, "microsoft",                     DiagArray91, 0 },
  { 15, "mismatched-tags",               DiagArray92, 0 },
  { 14, "missing-braces",                DiagArray93, 0 },
  { 20, "missing-declarations",          DiagArray94, 0 },
  { 26, "missing-field-initializers",    DiagArray95, 0 },
  { 24, "missing-format-attribute",      0, 0 },
  { 20, "missing-include-dirs",          0, 0 },
  { 16, "missing-noreturn",              DiagArray98, 0 },
  { 18, "missing-prototypes",            DiagArray99, 0 },
  { 4, "most",                          0, DiagSubGroup100 },
  { 9, "multichar",                     DiagArray101, 0 },
  { 14, "nested-externs",                0, 0 },
  { 11, "newline-eof",                   0, 0 },
  { 7, "non-gcc",                       0, DiagSubGroup104 },
  { 17, "non-pod-memaccess",             DiagArray105, 0 },
  { 15, "non-pod-varargs",               DiagArray106, 0 },
  { 16, "non-virtual-dtor",              DiagArray107, 0 },
  { 15, "nonfragile-abi2",               DiagArray108, 0 },
  { 7, "nonnull",                       DiagArray109, 0 },
  { 21, "nonportable-cfstrings",         0, 0 },
  { 16, "null-dereference",              DiagArray111, 0 },
  { 14, "old-style-cast",                0, 0 },
  { 20, "old-style-definition",          0, 0 },
  { 23, "out-of-line-declaration",       DiagArray114, 0 },
  { 8, "overflow",                      0, 0 },
  { 18, "overlength-strings",            DiagArray116, 0 },
  { 18, "overloaded-virtual",            DiagArray117, 0 },
  { 6, "packed",                        DiagArray118, 0 },
  { 6, "padded",                        DiagArray119, 0 },
  { 11, "parentheses",                   DiagArray120, DiagSubGroup120 },
  { 13, "pointer-arith",                 DiagArray121, 0 },
  { 12, "pointer-sign",                  DiagArray122, 0 },
  { 19, "pointer-to-int-cast",           0, 0 },
  { 8, "protocol",                      DiagArray124, 0 },
  { 21, "readonly-setter-attrs",         DiagArray125, 0 },
  { 15, "redundant-decls",               0, 0 },
  { 7, "reorder",                       DiagArray127, 0 },
  { 11, "return-type",                   DiagArray128, 0 },
  { 8, "selector",                      DiagArray129, 0 },
  { 11, "self-assign",                   DiagArray130, 0 },
  { 28, "semicolon-before-method-body",  DiagArray131, 0 },
  { 14, "sequence-point",                0, 0 },
  { 6, "shadow",                        DiagArray133, 0 },
  { 14, "shift-overflow",                DiagArray134, 0 },
  { 19, "shift-sign-overflow",           DiagArray135, 0 },
  { 16, "shorten-64-to-32",              DiagArray136, 0 },
  { 12, "sign-compare",                  DiagArray137, 0 },
  { 15, "sign-conversion",               DiagArray138, 0 },
  { 10, "sign-promo",                    0, 0 },
  { 15, "stack-protector",               0, 0 },
  { 15, "strict-aliasing",               0, 0 },
  { 17, "strict-aliasing=0",             0, 0 },
  { 17, "strict-aliasing=1",             0, 0 },
  { 17, "strict-aliasing=2",             0, 0 },
  { 15, "strict-overflow",               0, 0 },
  { 17, "strict-overflow=0",             0, 0 },
  { 17, "strict-overflow=1",             0, 0 },
  { 17, "strict-overflow=2",             0, 0 },
  { 17, "strict-overflow=3",             0, 0 },
  { 17, "strict-overflow=4",             0, 0 },
  { 17, "strict-overflow=5",             0, 0 },
  { 17, "strict-prototypes",             0, 0 },
  { 21, "strict-selector-match",         DiagArray153, 0 },
  { 27, "super-class-method-mismatch",   DiagArray154, 0 },
  { 6, "switch",                        DiagArray155, DiagSubGroup155 },
  { 14, "switch-default",                0, 0 },
  { 11, "switch-enum",                   DiagArray157, 0 },
  { 5, "synth",                         0, 0 },
  { 20, "tautological-compare",          DiagArray159, 0 },
  { 9, "trigraphs",                     DiagArray160, 0 },
  { 11, "type-limits",                   0, 0 },
  { 20, "typedef-redefinition",          DiagArray162, 0 },
  { 19, "undeclared-selector",           DiagArray163, 0 },
  { 5, "undef",                         DiagArray164, 0 },
  { 18, "undefined-internal",            0, 0 },
  { 26, "undefined-reinterpret-cast",    DiagArray166, 0 },
  { 13, "uninitialized",                 DiagArray167, 0 },
  { 18, "unknown-attributes",            DiagArray168, 0 },
  { 15, "unknown-pragmas",               DiagArray169, 0 },
  { 22, "unknown-warning-option",        DiagArray170, 0 },
  { 26, "unnamed-type-template-args",    DiagArray171, 0 },
  { 29, "unneeded-internal-declaration", DiagArray172, 0 },
  { 24, "unneeded-member-function",      DiagArray173, 0 },
  { 16, "unreachable-code",              DiagArray174, 0 },
  { 6, "unused",                        0, DiagSubGroup175 },
  { 15, "unused-argument",               0, 0 },
  { 26, "unused-exception-parameter",    DiagArray177, 0 },
  { 15, "unused-function",               DiagArray178, DiagSubGroup178 },
  { 12, "unused-label",                  DiagArray179, 0 },
  { 13, "unused-macros",                 DiagArray180, 0 },
  { 22, "unused-member-function",        DiagArray181, DiagSubGroup181 },
  { 16, "unused-parameter",              DiagArray182, 0 },
  { 12, "unused-value",                  DiagArray183, 0 },
  { 15, "unused-variable",               DiagArray184, 0 },
  { 22, "used-but-marked-unused",        DiagArray185, 0 },
  { 15, "variadic-macros",               DiagArray186, 0 },
  { 18, "vector-conversions",            DiagArray187, 0 },
  { 3, "vla",                           DiagArray188, 0 },
  { 21, "volatile-register-var",         0, 0 },
  { 12, "weak-vtables",                  DiagArray190, 0 },
  { 13, "write-strings",                 0, DiagSubGroup191 },
#endif // GET_DIAG_TABLE


#ifdef GET_CATEGORY_TABLE
CATEGORY("", DiagCat_None)
CATEGORY("Parse Issue", DiagCat_Parse_Issue)
CATEGORY("Lexical or Preprocessor Issue", DiagCat_Lexical_or_Preprocessor_Issue)
CATEGORY("Semantic Issue", DiagCat_Semantic_Issue)
CATEGORY("Inline Assembly Issue", DiagCat_Inline_Assembly_Issue)
CATEGORY("#warning Directive", DiagCat__warning_Directive)
CATEGORY("Deprecations", DiagCat_Deprecations)
CATEGORY("Format String Issue", DiagCat_Format_String_Issue)
CATEGORY("Value Conversion Issue", DiagCat_Value_Conversion_Issue)
CATEGORY("#pragma message Directive", DiagCat__pragma_message_Directive)
CATEGORY("Unused Entity Issue", DiagCat_Unused_Entity_Issue)
#endif // GET_CATEGORY_TABLE


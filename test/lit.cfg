# -*- Python -*-

import os
import platform

# Configuration file for the 'lit' test runner.

# name: The name of this test suite.
config.name = 'Mlang'

# Tweak PATH for Win32
if platform.system() == 'Windows':
    # Seek sane tools in directories and set to $PATH.
    path = getattr(config, 'lit_tools_dir', None)
    path = lit.getToolsPath(path,
                            config.environment['PATH'],
                            ['cmp.exe', 'grep.exe', 'sed.exe'])
    if path is not None:
        path = os.path.pathsep.join((path,
                                     config.environment['PATH']))
        config.environment['PATH'] = path

# testFormat: The test format to use to interpret tests.
#
# For now we require '&&' between commands, until they get globally killed and
# the test runner updated.
execute_external = (platform.system() != 'Windows'
                    or lit.getBashPath() not in [None, ""])
config.test_format = lit.formats.ShTest(execute_external)

# suffixes: A list of file extensions to treat as test files.
config.suffixes = ['.c', '.cpp', '.m', '.mex', '.cu', '.ll', '.cl']

# test_source_root: The root path where tests are located.
config.test_source_root = os.path.dirname(__file__)

# test_exec_root: The root path where tests should be run.
mlang_obj_root = getattr(config, 'mlang_obj_root', None)
if mlang_obj_root is not None:
    config.test_exec_root = os.path.join(mlang_obj_root, 'test')

# Set llvm_{src,obj}_root for use by others.
config.llvm_src_root = getattr(config, 'llvm_src_root', None)
config.llvm_obj_root = getattr(config, 'llvm_obj_root', None)

# Tweak the PATH to include the tools dir and the scripts dir.
if mlang_obj_root is not None:
    llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
    if not llvm_tools_dir:
        lit.fatal('No LLVM tools dir set!')
    path = os.path.pathsep.join((llvm_tools_dir, config.environment['PATH']))
    config.environment['PATH'] = path

    llvm_libs_dir = getattr(config, 'llvm_libs_dir', None)
    if not llvm_libs_dir:
        lit.fatal('No LLVM libs dir set!')
    path = os.path.pathsep.join((llvm_libs_dir,
                                 config.environment.get('LD_LIBRARY_PATH','')))
    config.environment['LD_LIBRARY_PATH'] = path

###

# Check that the object root is known.
if config.test_exec_root is None:
    # Otherwise, we haven't loaded the site specific configuration (the user is
    # probably trying to run on a test file directly, and either the site
    # configuration hasn't been created by the build system, or we are in an
    # out-of-tree build situation).

    # Check for 'mlang_site_config' user parameter, and use that if available.
    site_cfg = lit.params.get('mlang_site_config', None)
    if site_cfg and os.path.exists(site_cfg):
        lit.load_config(config, site_cfg)
        raise SystemExit

    # Try to detect the situation where we are using an out-of-tree build by
    # looking for 'llvm-config'.
    #
    # FIXME: I debated (i.e., wrote and threw away) adding logic to
    # automagically generate the lit.site.cfg if we are in some kind of fresh
    # build situation. This means knowing how to invoke the build system though,
    # and I decided it was too much magic. We should solve this by just having
    # the .cfg files generated during the configuration step.

    llvm_config = lit.util.which('llvm-config', config.environment['PATH'])
    if not llvm_config:
        lit.fatal('No site specific configuration available!')

    # Get the source and object roots.
    llvm_src_root = lit.util.capture(['llvm-config', '--src-root']).strip()
    llvm_obj_root = lit.util.capture(['llvm-config', '--obj-root']).strip()
    mlang_src_root = os.path.join(llvm_src_root, "projects", "mlang")
    mlang_obj_root = os.path.join(llvm_obj_root, "projects", "mlang")

    # Validate that we got a tree which points to here, using the standard
    # tools/mlang layout.
    this_src_root = os.path.dirname(config.test_source_root)
    if os.path.realpath(mlang_src_root) != os.path.realpath(this_src_root):
        lit.fatal('No site specific configuration available!')

    # Check that the site specific configuration exists.
    site_cfg = os.path.join(mlang_obj_root, 'test', 'lit.site.cfg')
    if not os.path.exists(site_cfg):
        lit.fatal('No site specific configuration available! You may need to '
                  'run "make test" in your Mlang build directory.')

    # Okay, that worked. Notify the user of the automagic, and reconfigure.
    lit.note('using out-of-tree build at %r' % mlang_obj_root)
    lit.load_config(config, site_cfg)
    raise SystemExit

###

# Discover the 'mlang' and 'mlangcc' to use.

import os

def inferMlang(PATH):
    # Determine which mlang to use.
    mlang = os.getenv('MLANG')

    # If the user set mlang in the environment, definitely use that and don't
    # try to validate.
    if mlang:
        return mlang

    # Otherwise look in the path.
    mlang = lit.util.which('mlang', PATH)

    if not mlang:
        lit.fatal("couldn't find 'mlang' program, try setting "
                  "MLANG in your environment")

    return mlang

# When running under valgrind, we mangle '-vg' onto the end of the triple so we
# can check it with XFAIL and XTARGET.
if lit.useValgrind:
    config.target_triple += '-vg'

config.mlang = inferMlang(config.environment['PATH']).replace('\\', '/')
if not lit.quiet:
    lit.note('using mlang: %r' % config.mlang)
config.substitutions.append( ('%mlang_cc1', config.mlang + ' -cc1') )
config.substitutions.append( ('%mlangxx', ' ' + config.mlang +
                              ' -ccc-mlang-cxx -ccc-cxx '))
config.substitutions.append( ('%mlang', ' ' + config.mlang + ' ') )
config.substitutions.append( ('%test_debuginfo', ' ' + config.llvm_src_root + '/utils/test_debuginfo.pl ') )

# FIXME: Find nicer way to prohibit this.
config.substitutions.append(
    (' mlang ', """*** Do not use 'mlang' in tests, use '%mlang'. ***""") )
config.substitutions.append(
    (' mlang\+\+ ', """*** Do not use 'mlang++' in tests, use '%mlangxx'. ***"""))
config.substitutions.append(
    (' mlang-cc ',
     """*** Do not use 'mlang-cc' in tests, use '%mlang_cc1'. ***""") )
config.substitutions.append(
    (' mlang -cc1 ',
     """*** Do not use 'mlang -cc1' in tests, use '%mlang_cc1'. ***""") )
config.substitutions.append(
    (' %mlang-cc1 ',
     """*** invalid substitution, use '%mlang_cc1'. ***""") )

###

# Set available features we allow tests to conditionalize on.
if platform.system() != 'Windows':
    config.available_features.add('crash-recovery')

# Shell execution
if platform.system() not in ['Windows'] or lit.getBashPath() != '':
    config.available_features.add('shell')
